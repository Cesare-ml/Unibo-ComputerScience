// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// step1 -> if (zx == 1) set x = 0        // 16-bit constant
// step2 -> if (nx == 1) set x = !x       // bitwise not
// step3 -> if (zy == 1) set y = 0        // 16-bit constant
// step4 -> if (ny == 1) set y = !y       // bitwise not
// step5 -> if (f == 1)  set out = x + y  // integer 2's complement addition
// step6 -> if (f == 0)  set out = x & y  // bitwise and
// step7 -> if (no == 1) set out = !out   // bitwise not
// step8 -> if (out == 0) set zr = 1
// step9 -> if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    //step1
    Mux16(a=x, b=false, sel=zx, out=tmpX1);

    //step2
    Not16(in=tmpX1, out=tmpX2);
    Mux16(a=tmpX1, b=tmpX2, sel=nx, out=finalX);

    //step3
    Mux16(a=y, b=false, sel=zy, out=tmpY1);

    //step4
    Not16(in=tmpY1, out=tmpY2);
    Mux16(a=tmpY1, b=tmpY2, sel=ny, out=finalY);

    //step5
    Add16(a=finalX, b=finalY, out=sum);
    //step6
    And16(a=finalX, b=finalY, out=and);
    //step5-6
    Mux16(a=and, b=sum, sel=f, out=step56);

    //step7 -> setting out
    Not16(in=step56, out=tmpOut);
    Mux16(a=step56, b=tmpOut, sel=no, out=finalOut, out=out, out[0..7]=finalOutLow, out[8..15]=finalOutHigh);

    //step8 -> setting zr
    Or8Way(in=finalOutLow,  out=tmpZr1);
    Or8Way(in=finalOutHigh, out=tmpZr2);
    Or(a=tmpZr1, b=tmpZr2, out=tmpZr3);
    Not(in=tmpZr3, out=zr);

    //step9 -> setting ng
    And16(a=finalOut, b=true, out[15]=ng);
}
